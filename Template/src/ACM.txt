1.判定最小生成树是否唯一
1)删除拥有相同权值的树边，重新求一次权值和，看是否相同。
2)求次小生成树，看权值是否和最小生成树一样。Max[i][j]记录MST上点i到j的最大边权。每次添加新边到MST，必定构成环，删除环上权值最大的边，计算MST值。全部步骤后，即可知道次小生成树值

2.判断最小割是否唯一
如果源点能够到达点的个数 + 汇点能够到达点的个数 = 所有点个数。则最小割唯一。
证明：假设S沿着不满流的边不可到达点V，则说明S->V的可行边满流，假设T沿着不满流的边不可到达点V，则说明T->V的可行边满流，这样V点可以属于S集也能属于T集，最小割方案不唯一。

3.流量有上下界的网络的最大流（无源汇）
以前写的最大流默认的下界为0，而这里的下界却不为0，所以我们要进行再构造让每条边的下界为0，这样做是为了方便处理。对于每根管子有一个上界容量up和一个下界容量low，我们让这根管子的容量下界变为0，上界为up-low。可是这样做了的话流量就不守恒了，为了再次满足流量守恒，即每个节点"入流=出流”，我们增设一个超级源点st和一个超级终点sd。我们开设一个数组du[]来记录每个节点的流量情况。
du[i]=in[i]（i节点所有入流下界之和）-out[i]（i节点所有出流下界之和）。
当du[i]大于0的时候，st到i连一条流量为du[i]的边。
当du[i]小于0的时候，i到sd连一条流量为-du[i]的边。
一次最大流，判断是否满流，满流答案就是f + b（每条边的流量+每条边的下界）

4.（有源汇）
同上建图。
增设一条从d->s没有下界容量为无穷的边
对（sd，st）进行一次最大流，当maxflow等于所有(du[]>0)之和时，有可行流，否则没有。
当有可行流时，删除超级源点sd和超级终点st（其实不用删除，反正第二次流量也流不到这边），再对（s，d）进行一次最大流，此时得到的maxflow则为题目的解。

5.流量有上下界的网络的最小流量
建图同上。
先不增加d->s容量为无穷的边，进行一次maxflow（），如果还没有满流，则加一条（d，s）容量为无穷的边，再进行一次maxflow（），当且仅当所有附加弧满载时，有可行解，解为flow[（d->s）^1]（即d到s的后悔边权值）。

6.设 A、 B 是无向连通图 G 的两个不相邻的顶点，最少要删除多少个顶点才能使得 A 和 B 不再连通？
答案是 P(A, B)<A到B的强独立轨的最大条数>个
6.1无向图G的顶点连通度（删除多少个点后图不连通）
完全图为V - 1, 其它图为min<AB不相连>P(A,B) 废话么= =
变成网络流求解。1.拆点，容量1；2.任意两点u'',v'   v'', u' 容量无穷；3.求最大流

7.设 A、 B 是无向连通图 G 的两个不相邻的顶点，最少要删除多少条边才能使得 A 和 B 不再连通？
答案是 P'(A, B)<A 到 B 的弱独立轨的最大条数>个
7.1无向图G的边连通度（删除多少条边后图不连通）
1) 原图 G 中的每条边 e = (u, v)变成重边， 再将这两条边加上互为反向的方向， 设 e'为<u, v>，
e''为<v, u>， e'和 e''的容量均为 1；
2) 以 A 为源点， B 为汇点。

8.二维向量p1 = (x1, y1), p2 = (x2, y2)，内积：p1*p2 = x1x2 + y1y2；外积：p1Xp2 = x1y2 - x2y1；
8.1判断点是否在线段上
外积判断是否在一条直线（等于0），内积判断是否在线段上（小于0）

9.判断增加哪条边能增加网络中的流量
最大流，然后从s开始dfs标记s能到的点，从t开始沿着逆向边dfs标记t能到的点，如果s->u   v->t  && u->v是边，则这条边就是能加大的。

10.
点支配：点覆盖点
点覆盖：点覆盖边
点独立：谁都不碰谁
边覆盖：边覆盖点
边独立：谁都不抢谁的点，匹配哦~
最小路径覆盖：有向图。V - 最大匹配数。（如果是可重复点的最小路径覆盖，需要做一次传递闭包）1->2->3; 4->2->5;
最大团：图中点数最多的完全子图。
最小边覆盖：二分图。V - 最大匹配数
最小顶点覆盖：等于最大匹配数
最大独立集：V - 最小顶点覆盖
最小割 = 最小点权覆盖集 = 点权和 - 最大点权独立集

11.n - m + r = 2欧拉公式（点-边+面=2）

12.最大密度子图
二分密度值g。
源点与所有点容量U（足够大，使得U+2g-dv不为负数)
汇点与所有点容量U - 2g - dv(dv是点的度数)<有边权这里代表点相连的边权和>
//如果是有点权和边权，点与点间容量为U - 2(g - p) - dv
点与点间，建立容量1的两条边<有边权，这里容量该位边权>
//实质上无边权是有边权的特例。边权为1

13.线段树 （模多少的和）
离散化坐标，记录每个膜的和，记录偏移的个数，显然，更新某点时，左子树
偏移不变，右子树偏移变了。

14.最大闭权子图
A依赖B，A->B无穷容量，点A盈利，S->A盈利量，A花费，A->T花费量

15.什么是代码能力？
简单地说，如果你觉得学会了某一个算法或者数据结构，你能否在半个小时（或一小时）内完成程序，并且经过很少的调试一次通过？如果做不到的话，只能说你还没彻底掌握这个算法或数据结构，要不断地训练，直到达到要求，只有这样才能保证在高度紧张的比赛中敢于实现而不犯错误。

16.贪心算法的正确性
要证明一个贪心算法是正确的，需要证明我们可以把一个最优解逐步转化为我们用贪心算法所得到的解，而解不会更差，从而证明贪心算法得到的解和最优解是一样好的（显然，最优解不可能更好)。而要证明一个贪心算法是错误的，只需要找到一个反例就可以了。

17.ax+by=c的求解
有解的条件：c % gcd(a, b) == 0
以 258x+147y=369 为例：
258 = 147(1) + 111
147 = 111(1) + 36
111 = 36(3) + 3
36 = 3(12)
得到GCD之后：
3 = 111 - 3(36) 
  = 111 - 3(147 - 1(111)) 
  = 4(111) - 3(147)
  = 4(258 - 1(147)) - 3(147)

http://math.stackexchange.com/questions/20717/how-to-find-solutions-of-linear-diophantine-ax-by-c
